Saving, loading and logging
===========================

Tracking metrics (TensorBoard)
------------------------------

Configuration
^^^^^^^^^^^^^

`TensorBoard <https://www.tensorflow.org/tensorboard>`_ is used for tracking and visualizing metrics and scalars (coefficients, losses, etc.). The tracking and writing of metrics and scalars is the responsibility of the agents (**can be customized independently for each agent using its configuration dictionary**)

Each agent offers the following parameters under the :literal:`"experiment"` key

.. code-block:: python
    :emphasize-lines: 5,6,7

    DEFAULT_CONFIG = {
        ...
        
        "experiment": {
            "directory": "",            # experiment's parent directory
            "experiment_name": "",      # experiment name
            "write_interval": 250,      # TensorBoard writing interval (timesteps)

            "checkpoint_interval": 1000,        # interval for checkpoints (timesteps)
            "checkpoint_policy_only": True,     # checkpoint for policy only
        }
    }

* **directory**: directory path where the data generated by the experiments (a subdirectory) are stored. If no value is set, the :literal:`runs` folder (inside the current working directory) will be used (and created if it does not exist)

* **experiment_name**: name of the experiment (subdirectory). If no value is set, it will be the current date and time and the agent's name (e.g. :literal:`22-01-09_22-48-49-816281_DDPG`)

* **write_interval**: interval for writing metrics and values to TensorBoard (default is 250 timesteps). A value equal to or less than 0 disables tracking and writing to TensorBoard

Tracked metrics/scales visualization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To visualize the tracked metrics/scales, during or after the training, TensorBoard can be launched using the following command in a terminal 

.. code-block:: bash

    tensorboard --logdir=PATH_TO_RUNS_DIRECTORY

.. image:: ../_static/imgs/data_tensorboard.jpg
      :width: 100%
      :align: center
      :alt: TensorBoard panel
|

The following table shows the metrics/scales tracked by each agent ([**+**] all the time, [**-**] only when such a function is enabled in the agent's configuration):

+-----------+--------------------+------------------+-----------------+-----------------+-----------------+
|Tag        |Metric / Scalar     |.. centered:: DDPG|.. centered:: TD3|.. centered:: SAC|.. centered:: PPO|
+===========+====================+==================+=================+=================+=================+
|Coefficient|Entropy coefficient |                  |                 |.. centered:: +  |                 |
+-----------+--------------------+------------------+-----------------+-----------------+-----------------+
|Episode    |Total timesteps     |.. centered:: +   |.. centered:: +  |.. centered:: +  |.. centered:: +  |
+-----------+--------------------+------------------+-----------------+-----------------+-----------------+
|Loss       |Policy loss         |.. centered:: +   |.. centered:: +  |.. centered:: +  |.. centered:: +  |
+           +--------------------+------------------+-----------------+-----------------+-----------------+
|           |Critic loss         |.. centered:: +   |.. centered:: +  |.. centered:: +  |                 |
+           +--------------------+------------------+-----------------+-----------------+-----------------+
|           |Value loss          |                  |                 |                 |.. centered:: +  |
+           +--------------------+------------------+-----------------+-----------------+-----------------+
|           |Entropy loss        |                  |                 |.. centered:: -- |.. centered:: -- |
+-----------+--------------------+------------------+-----------------+-----------------+-----------------+
|Noise      |Exploration noise   |.. centered:: +   |.. centered:: +  |                 |                 |
+-----------+--------------------+------------------+-----------------+-----------------+-----------------+
|Policy     |Standard deviation  |                  |                 |                 |.. centered:: +  |
+-----------+--------------------+------------------+-----------------+-----------------+-----------------+
|Q-network  |Q1                  |.. centered:: +   |.. centered:: +  |.. centered:: +  |                 |
+           +--------------------+------------------+-----------------+-----------------+-----------------+
|           |Q2                  |                  |.. centered:: +  |.. centered:: +  |                 |
+-----------+--------------------+------------------+-----------------+-----------------+-----------------+
|Reward     |Instantaneous reward|.. centered:: +   |.. centered:: +  |.. centered:: +  |.. centered:: +  |
+           +--------------------+------------------+-----------------+-----------------+-----------------+
|           |Total reward        |.. centered:: +   |.. centered:: +  |.. centered:: +  |.. centered:: +  |
+-----------+--------------------+------------------+-----------------+-----------------+-----------------+
|Target     |Target              |.. centered:: +   |.. centered:: +  |.. centered:: +  |                 |
+-----------+--------------------+------------------+-----------------+-----------------+-----------------+

Tracking custom metrics/scales
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* **Tracking custom data attached to the agent's control and timing logic (recommended)**

  Although the TensorBoard's writing control and timing logic is controlled by the base class Agent, it is possible to track custom data. The :literal:`track_data` method can be used (see :doc:`Agent <../modules/skrl.agents.base_class>` class for more details), passing as arguments the data identification (tag) and the scalar value to be recorded

  For example, to track the current CPU usage, the following code can be used:

  .. code-block:: python

      # assuming agent is an instance of an Agent subclass
      agent.track_data("Resource / CPU usage", psutil.cpu_percent())

* **Tracking custom data directly to Tensorboard**

  It is also feasible to access directly to the `SummaryWriter <https://pytorch.org/docs/stable/tensorboard.html#torch.utils.tensorboard.writer.SummaryWriter>`_ instance through the :literal:`writer` property if it is desired to write directly to Tensorboard, avoiding the base class's control and timing logic

  For example, to write directly to TensorBoard:

  .. code-block:: python

      # assuming agent is an instance of an Agent subclass
      agent.writer.add_scalar("Resource / CPU usage", psutil.cpu_percent(), global_step=1000)

----------------

Model checkpoint
----------------

Saving checkpoints
^^^^^^^^^^^^^^^^^^

The checkpoints are saved in the :literal:`checkpoints` subdirectory of the experiment's directory (its path can be customized using the options described in the previous subsection). The checkpoint name is the current timestep and the key referring to the model (e.g. :literal:`runs/22-01-09_22-48-49-816281_DDPG/checkpoints/2500_policy.pt`)

The checkpoint management, as in the previous case, is the responsibility of the agents (**can be customized independently for each agent using its configuration dictionary**)

.. code-block:: python
    :emphasize-lines: 9,10

    DEFAULT_CONFIG = {
        ...
        
        "experiment": {
            "directory": "",            # experiment's parent directory
            "experiment_name": "",      # experiment name
            "write_interval": 250,      # TensorBoard writing interval (timesteps)

            "checkpoint_interval": 1000,        # interval for checkpoints (timesteps)
            "checkpoint_policy_only": True,     # checkpoint for policy only
        }
    }

* **checkpoint_interval**: interval for checkpoints (default is 1000 timesteps). A value equal to or less than 0 disables the checkpoint creation

* **checkpoint_policy_only**: if set to :literal:`True`, only the policy will be saved (default behaviour), otherwise all the agent's models (policy, value function, critic, .etc) will be checkpointed

Loading checkpoints
^^^^^^^^^^^^^^^^^^^

TODO :red:`(comming soon)`


--------------------

Memory export/import
--------------------

TODO :red:`(comming soon)`
